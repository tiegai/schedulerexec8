# Overall properties not specific to a running environment
#
info.app.name=onencp-springboot
info.app.description=Application on Spring Boot w/ Spring Cloud
info.app.version=0.0.1
info.app.group.name=onencp

# Logging properties
spring.main.bannerMode=off

# Service properties
spring.application.name=onencp-springboot
spring.mvc.throw-exception-if-no-handler-found=true
spring.web.resources.add-mappings=false

server.port=8080
management.server.port=8077
management.endpoints.web.base-path=/
management.endpoints.web.exposure.include=info,health,signalfx,loggers
management.endpoints.web.path-mapping.health=/healthcheck

# ====== Wingtips config - the properties below are used by WingtipsSpringBootProperties ======

# The default SpanLoggingRepresentation that should be used for serializing distributed tracing spans.
#   You can choose from KEY_VALUE and JSON. KEY_VALUE is *highly* recommended for Splunk performance and ease of use.
wingtips.spanLoggingFormat=KEY_VALUE

# The set of (comma delimited) header names that represent a "user ID" for the purposes of auto-populating the
#   userId field when distributed tracing spans are logged.
wingtips.userIdHeaderKeys=X-Nike-Application,X-Nike-AppId,appId,AppId,USERID,UPMID

# ====== Metrics config ======
# For SignalFx Metrics configuration options see the README here:
# https://bitbucket.nike.com/projects/COPBLUE/repos/nike-signalfx-lib-java/browse/sfx-spring-boot-metrics

# The NikeMetricRegistryInitParams can be configured under the "nike.signalfx.registry" prefix

# Register JVM metrics (helpful on systems that don't have the collectd JMX plugin enabled)
nike.signalfx.registry.registerJvmMetrics=true

# True to enable silent mode of the NikeMetricRegistry, a NikeMetricRegistry will still be created but
# the nike_signalfx.conf config file will not be read or validated and metrics will not be sent to SignalFx.
nike.signalfx.registry.enableSilentModeForLocalDev=true
