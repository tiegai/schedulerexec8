// Differentiate between the builds of master and the PR builds.
def branch = System.getProperty("FROM_BRANCH", "master")

// Override the config for pull request analysis
if (!branch.equalsIgnoreCase('master')) {
    // For PRA we don't want the build to fail on failures.
    // We want to be able to collect them and inject them back into the Pull Request.
    checkstyle {
        ignoreFailures = true
    }
    pmd {
        ignoreFailures = true
    }
    test {
        ignoreFailures = true
    }
}

checkstyle {
    configFile = rootProject.file('codequality/checkstyle.xml')
    sourceSets = [project.sourceSets.main]
    checkstyleMain.exclude '**/Application.*/**', '**/Constants.*/**'
}

pmd { // https://pmd.github.io/latest/pmd_userdocs_tools_gradle.html
    toolVersion = '6.39.0'
    sourceSets = [project.sourceSets.main]
}

/**
 * A brief discussion of spotbugs is in codequality/spotbugsexclude.xml.
 *
 * Two files are created by spotbugs:
 *      build/reports/spotbugs/main.xml and
 *      build/reports/spotbugs/main.html.
 * Note that main.html is created by postprocessing the main.xml file.
 *
 * Furthermore, you probably don't want to run the spotbugsTest task.
 * Tests are useful because they do, well, weird things.
 * spotbugs will notice this and give you a lot of noise that will not help your code quality.
 *
 * https://github.com/spotbugs/spotbugs-gradle-plugin/blob/master/src/main/groovy/com/github/spotbugs/snom/SpotBugsExtension.groovy
 */
spotbugs {
    toolVersion = '3.1.12'

    ignoreFailures = false

    // Location of report
    reportsDir = file(project.projectDir.getAbsolutePath() + '/build/reports/spotbugs')

    // Optional exclusion specification
    def excludeFile = file('codequality/spotbugsexclude.xml')
    if (excludeFile.isFile()) {
        excludeFilter = excludeFile
    }

    // "max" "increase[s] precision and find[s] more bugs at the expense of running time and memory consumption."
    effort = "max"
}

/**
 * https://github.com/spotbugs/spotbugs-gradle-plugin#configure-the-spotbugstask
 */
spotbugsMain {
    reports {
        xml {
            required.set(true)
            // This config is important to generate extra information for spotbugsHtml,
            // but no longer available in `spotbugs` v5
            // withMessages = true
        }
        // You can only choose xml or html, but not both :-(
        // The spotbugsHtml task (below) works around this.
        html { getRequired().set(false) }
    }
}

spotbugsTest {
    reports {
        xml { required.set(true) }
        html { getRequired().set(false) }
    }
}

task spotbugsHtml {
    group = "Verification"
    description = "Creates a human readable Spotbugs report"
    doLast {
        ant.xslt(in: file("$buildDir/reports/spotbugs/main.xml"),
                style: file('codequality/spotbugs_default.xsl'),
                out: new File("$buildDir/reports/spotbugs/main.html"))
    }
}

spotbugsMain.finalizedBy spotbugsHtml

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
        html.destination file("$buildDir/reports/jacoco")
    }
    
    apply from: rootProject.file('gradle/coverageExcludes.gradle')

    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: coverageExcludes)
        })
    }
}

test {
    useJUnitPlatform()  
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
    finalizedBy jacocoTestReport
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled = true
        html.enabled = true
        html.stylesheet = resources.text.fromFile('codequality/checkstyle-noframes-sorted.xsl')
    }
}

