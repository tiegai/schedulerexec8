#!groovy
@Library(['cicd-pipeline', 'cop-pipeline-step', 'cop-pipeline-configuration@c4c-ncp']) _



def cloudformationTemplatePath  = "./cloudformation/ecs-service-elb.yaml"

Map accountSettings = [
		test: [
				accountId               : '128123422106',
				securityGroups          : 'sg-0acc524825338bd51',
				privateSubnets          : 'subnet-0075a560decfbdc3f',
				vpcId                   : 'vpc-083124926037',
				awsRole                 : 'gc-cds-jenkins',
				awsRegion               : 'cn-northwest-1',
				slackChannelName        : '#gcncp-jenkins-auto-notifications',
				bmxAgentLabel           : 'ec2-ondemand-agent-cn',
				nikeTagGuid             : '8e339711-209e-4205-b792-02db90a2a934'
		]
]

def account     = accountSettings.test

def tags        = [
		'classification'            : 'Bronze',
		'costcenter'                : '161961',
		'email'                     : 'gc-marketing@nike.com',
		'nike_ca_qma_url'           : 'https://qma.auto.nikecloud.com/candidate/details/3c528dbe-98bb-452b-baca-5cad16f10a51',
		'nike-application'          : 'onencp',
		'nike-requestor'            : 'andrew.xiang@nike.com',
		'owner'                     : 'danny.zhang',
		'nike-department'           : 'gc marketing technology',
		'nike-domain'               : 'consumer engagement',
		'nike-distributionlist'     : 'Lst-GT.GC-MarTech@nike.com',
		'nike-owner'                : 'Danny.Zhang@nike.com',
		'nike-tagguid'              : account.nikeTagGuid
]

def pra         = [
		cerberusEnv                 : "china-v2",
		sdbPath                     : "shared/notification/credentials",
		userNameKey                 : "gc-ncp-maui-pipelineuser",
		passwordKey                 : "gc-ncp-maui-pipelinepassword"
]

def cloudRed    = [
		tagGuid                     : account.nikeTagGuid,
		region                      : account.awsRegion,
		env                         : 'prod'
]


def notify = [
		slack : [
				onCondition             : ['Build Start', 'Failure', 'Success', 'Unstable', 'Aborted', 'Confirm Promote'],
				channel                 : account.slackChannelName
		]
]

def deployFlow = [
		ECS_SLB : ['Archive Current State', 'Deploy Infrastructure']
]

def branchMatcher = [
		PULL_REQUEST    : ['^(?!main$).*$'],
		ECS_SLB         : ['main']
]

def aws = [
		awsRole         : account.awsRole,
		role            : account.awsRole,
		accountId       : account.accountId,
		region          : account.awsRegion
]

def config;



node {

	checkout scm
	//def props           = readProperties file: './gradle.properties'
	withGit(credentialsId : 'GHEC') {
		sh "git pull"
	}

	def props           = readProperties file: './gradle.properties'
	def artifactId      = props['artifactId']


	def customBuildParameters = [
			string(
					name            : 'NIKE_REQUESTOR',
					defaultValue    : 'andrew.xiang@nike.com',
					description     : 'AWS Resource Requestor',
			),
			string(
					name            : 'ONENCP_SERVICE',
					defaultValue    : "${artifactId}",
					description     : "For service name check, Don't change me!",
			)
	]

	def serviceName             = artifactId?.trim()
	def elbStackName            = "onencp-${serviceName}-ELB"

	assert serviceName?.trim() && (! 'null'.equals(serviceName))
	config = [
			customBuildParameters   : customBuildParameters,
			agentLabel              : account.bmxAgentLabel,
			usePraDispatch          : false,
			pra                     : pra,
			branchMatcher           : branchMatcher,
			notify                  : notify,
			tags                    : [
					'nike-requestor'        : params.CUSTOM_NIKE_REQUESTOR
			] + tags,
			deploymentEnvironment   : [
					ecs_slb                 : [
							deployFlow              : deployFlow,
							aws                     : aws,
							cf                      : [
									stackName           : "${elbStackName}",
									templateFile        : "${cloudformationTemplatePath}",
									parameters          : [
											'ServiceName'       : "${serviceName}"
									]
							],
							tags                : [
									'nike-environment'  : 'test'
							]
					]
			],
	]

}
cloudformationPipeline(config)